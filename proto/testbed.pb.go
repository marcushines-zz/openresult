// Code generated by protoc-gen-go.
// source: github.com/marcushines/openresult/proto/testbed.proto
// DO NOT EDIT!

/*
Package openresult is a generated protocol buffer package.

It is generated from these files:
	github.com/marcushines/openresult/proto/testbed.proto

It has these top-level messages:
	LocalService
	WebService
	CloudService
	Dependency
	Service
	IPv4
	IPv6
	ISO
	Address
	Interface
	Device
	Testbed
*/
package openresult

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LocalService struct {
	Host string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Port uint32 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *LocalService) Reset()                    { *m = LocalService{} }
func (m *LocalService) String() string            { return proto.CompactTextString(m) }
func (*LocalService) ProtoMessage()               {}
func (*LocalService) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type WebService struct {
	Url string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
}

func (m *WebService) Reset()                    { *m = WebService{} }
func (m *WebService) String() string            { return proto.CompactTextString(m) }
func (*WebService) ProtoMessage()               {}
func (*WebService) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CloudService struct {
	Endpoint string `protobuf:"bytes,2,opt,name=endpoint" json:"endpoint,omitempty"`
}

func (m *CloudService) Reset()                    { *m = CloudService{} }
func (m *CloudService) String() string            { return proto.CompactTextString(m) }
func (*CloudService) ProtoMessage()               {}
func (*CloudService) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Dependency struct {
}

func (m *Dependency) Reset()                    { *m = Dependency{} }
func (m *Dependency) String() string            { return proto.CompactTextString(m) }
func (*Dependency) ProtoMessage()               {}
func (*Dependency) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Service struct {
	Id           string        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Text         string        `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	Dependencies []*Dependency `protobuf:"bytes,3,rep,name=dependencies" json:"dependencies,omitempty"`
	// Types that are valid to be assigned to Type:
	//	*Service_External
	//	*Service_LocalService
	//	*Service_WebService
	//	*Service_CloudService
	Type isService_Type `protobuf_oneof:"type"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type isService_Type interface {
	isService_Type()
}

type Service_External struct {
	External *google_protobuf.Any `protobuf:"bytes,100,opt,name=external,oneof"`
}
type Service_LocalService struct {
	LocalService *LocalService `protobuf:"bytes,101,opt,name=local_service,json=localService,oneof"`
}
type Service_WebService struct {
	WebService *WebService `protobuf:"bytes,102,opt,name=web_service,json=webService,oneof"`
}
type Service_CloudService struct {
	CloudService *CloudService `protobuf:"bytes,103,opt,name=cloud_service,json=cloudService,oneof"`
}

func (*Service_External) isService_Type()     {}
func (*Service_LocalService) isService_Type() {}
func (*Service_WebService) isService_Type()   {}
func (*Service_CloudService) isService_Type() {}

func (m *Service) GetType() isService_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Service) GetDependencies() []*Dependency {
	if m != nil {
		return m.Dependencies
	}
	return nil
}

func (m *Service) GetExternal() *google_protobuf.Any {
	if x, ok := m.GetType().(*Service_External); ok {
		return x.External
	}
	return nil
}

func (m *Service) GetLocalService() *LocalService {
	if x, ok := m.GetType().(*Service_LocalService); ok {
		return x.LocalService
	}
	return nil
}

func (m *Service) GetWebService() *WebService {
	if x, ok := m.GetType().(*Service_WebService); ok {
		return x.WebService
	}
	return nil
}

func (m *Service) GetCloudService() *CloudService {
	if x, ok := m.GetType().(*Service_CloudService); ok {
		return x.CloudService
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Service) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Service_OneofMarshaler, _Service_OneofUnmarshaler, _Service_OneofSizer, []interface{}{
		(*Service_External)(nil),
		(*Service_LocalService)(nil),
		(*Service_WebService)(nil),
		(*Service_CloudService)(nil),
	}
}

func _Service_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Service)
	// type
	switch x := m.Type.(type) {
	case *Service_External:
		b.EncodeVarint(100<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.External); err != nil {
			return err
		}
	case *Service_LocalService:
		b.EncodeVarint(101<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LocalService); err != nil {
			return err
		}
	case *Service_WebService:
		b.EncodeVarint(102<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WebService); err != nil {
			return err
		}
	case *Service_CloudService:
		b.EncodeVarint(103<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CloudService); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Service.Type has unexpected type %T", x)
	}
	return nil
}

func _Service_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Service)
	switch tag {
	case 100: // type.external
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf.Any)
		err := b.DecodeMessage(msg)
		m.Type = &Service_External{msg}
		return true, err
	case 101: // type.local_service
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LocalService)
		err := b.DecodeMessage(msg)
		m.Type = &Service_LocalService{msg}
		return true, err
	case 102: // type.web_service
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(WebService)
		err := b.DecodeMessage(msg)
		m.Type = &Service_WebService{msg}
		return true, err
	case 103: // type.cloud_service
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CloudService)
		err := b.DecodeMessage(msg)
		m.Type = &Service_CloudService{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Service_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Service)
	// type
	switch x := m.Type.(type) {
	case *Service_External:
		s := proto.Size(x.External)
		n += proto.SizeVarint(100<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Service_LocalService:
		s := proto.Size(x.LocalService)
		n += proto.SizeVarint(101<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Service_WebService:
		s := proto.Size(x.WebService)
		n += proto.SizeVarint(102<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Service_CloudService:
		s := proto.Size(x.CloudService)
		n += proto.SizeVarint(103<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type IPv4 struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Prefix  uint32 `protobuf:"varint,2,opt,name=prefix" json:"prefix,omitempty"`
}

func (m *IPv4) Reset()                    { *m = IPv4{} }
func (m *IPv4) String() string            { return proto.CompactTextString(m) }
func (*IPv4) ProtoMessage()               {}
func (*IPv4) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type IPv6 struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Prefix  uint32 `protobuf:"varint,2,opt,name=prefix" json:"prefix,omitempty"`
}

func (m *IPv6) Reset()                    { *m = IPv6{} }
func (m *IPv6) String() string            { return proto.CompactTextString(m) }
func (*IPv6) ProtoMessage()               {}
func (*IPv6) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type ISO struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *ISO) Reset()                    { *m = ISO{} }
func (m *ISO) String() string            { return proto.CompactTextString(m) }
func (*ISO) ProtoMessage()               {}
func (*ISO) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type Address struct {
	// Types that are valid to be assigned to Type:
	//	*Address_Ipv4
	//	*Address_Ipv6
	//	*Address_Iso
	Type isAddress_Type `protobuf_oneof:"type"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type isAddress_Type interface {
	isAddress_Type()
}

type Address_Ipv4 struct {
	Ipv4 *IPv4 `protobuf:"bytes,1,opt,name=ipv4,oneof"`
}
type Address_Ipv6 struct {
	Ipv6 *IPv6 `protobuf:"bytes,2,opt,name=ipv6,oneof"`
}
type Address_Iso struct {
	Iso *ISO `protobuf:"bytes,3,opt,name=iso,oneof"`
}

func (*Address_Ipv4) isAddress_Type() {}
func (*Address_Ipv6) isAddress_Type() {}
func (*Address_Iso) isAddress_Type()  {}

func (m *Address) GetType() isAddress_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Address) GetIpv4() *IPv4 {
	if x, ok := m.GetType().(*Address_Ipv4); ok {
		return x.Ipv4
	}
	return nil
}

func (m *Address) GetIpv6() *IPv6 {
	if x, ok := m.GetType().(*Address_Ipv6); ok {
		return x.Ipv6
	}
	return nil
}

func (m *Address) GetIso() *ISO {
	if x, ok := m.GetType().(*Address_Iso); ok {
		return x.Iso
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Address) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Address_OneofMarshaler, _Address_OneofUnmarshaler, _Address_OneofSizer, []interface{}{
		(*Address_Ipv4)(nil),
		(*Address_Ipv6)(nil),
		(*Address_Iso)(nil),
	}
}

func _Address_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Address)
	// type
	switch x := m.Type.(type) {
	case *Address_Ipv4:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ipv4); err != nil {
			return err
		}
	case *Address_Ipv6:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ipv6); err != nil {
			return err
		}
	case *Address_Iso:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Iso); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Address.Type has unexpected type %T", x)
	}
	return nil
}

func _Address_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Address)
	switch tag {
	case 1: // type.ipv4
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IPv4)
		err := b.DecodeMessage(msg)
		m.Type = &Address_Ipv4{msg}
		return true, err
	case 2: // type.ipv6
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IPv6)
		err := b.DecodeMessage(msg)
		m.Type = &Address_Ipv6{msg}
		return true, err
	case 3: // type.iso
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ISO)
		err := b.DecodeMessage(msg)
		m.Type = &Address_Iso{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Address_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Address)
	// type
	switch x := m.Type.(type) {
	case *Address_Ipv4:
		s := proto.Size(x.Ipv4)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Address_Ipv6:
		s := proto.Size(x.Ipv6)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Address_Iso:
		s := proto.Size(x.Iso)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Interface struct {
	Id        string     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Addresses []*Address `protobuf:"bytes,2,rep,name=addresses" json:"addresses,omitempty"`
}

func (m *Interface) Reset()                    { *m = Interface{} }
func (m *Interface) String() string            { return proto.CompactTextString(m) }
func (*Interface) ProtoMessage()               {}
func (*Interface) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Interface) GetAddresses() []*Address {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type Device struct {
	Id        string       `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Interface []*Interface `protobuf:"bytes,2,rep,name=interface" json:"interface,omitempty"`
}

func (m *Device) Reset()                    { *m = Device{} }
func (m *Device) String() string            { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()               {}
func (*Device) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Device) GetInterface() []*Interface {
	if m != nil {
		return m.Interface
	}
	return nil
}

// Testbed stores the system under test.
type Testbed struct {
	Services []*Service `protobuf:"bytes,1,rep,name=services" json:"services,omitempty"`
	Devices  []*Device  `protobuf:"bytes,2,rep,name=devices" json:"devices,omitempty"`
	Hosts    []*Device  `protobuf:"bytes,3,rep,name=hosts" json:"hosts,omitempty"`
}

func (m *Testbed) Reset()                    { *m = Testbed{} }
func (m *Testbed) String() string            { return proto.CompactTextString(m) }
func (*Testbed) ProtoMessage()               {}
func (*Testbed) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Testbed) GetServices() []*Service {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *Testbed) GetDevices() []*Device {
	if m != nil {
		return m.Devices
	}
	return nil
}

func (m *Testbed) GetHosts() []*Device {
	if m != nil {
		return m.Hosts
	}
	return nil
}

func init() {
	proto.RegisterType((*LocalService)(nil), "openresult.LocalService")
	proto.RegisterType((*WebService)(nil), "openresult.WebService")
	proto.RegisterType((*CloudService)(nil), "openresult.CloudService")
	proto.RegisterType((*Dependency)(nil), "openresult.Dependency")
	proto.RegisterType((*Service)(nil), "openresult.Service")
	proto.RegisterType((*IPv4)(nil), "openresult.IPv4")
	proto.RegisterType((*IPv6)(nil), "openresult.IPv6")
	proto.RegisterType((*ISO)(nil), "openresult.ISO")
	proto.RegisterType((*Address)(nil), "openresult.Address")
	proto.RegisterType((*Interface)(nil), "openresult.Interface")
	proto.RegisterType((*Device)(nil), "openresult.Device")
	proto.RegisterType((*Testbed)(nil), "openresult.Testbed")
}

func init() {
	proto.RegisterFile("github.com/marcushines/openresult/proto/testbed.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 554 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x94, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0x59, 0x5b, 0xda, 0xf5, 0xb4, 0x83, 0xc9, 0xc0, 0x14, 0x76, 0x01, 0x53, 0x90, 0x50,
	0x85, 0x50, 0x22, 0xba, 0x51, 0x01, 0x37, 0x68, 0xb0, 0x0b, 0x2a, 0x01, 0x43, 0x29, 0x12, 0x97,
	0x28, 0x89, 0x4f, 0x5b, 0x4b, 0x59, 0x1c, 0xe5, 0x4f, 0xd7, 0xbe, 0x00, 0x0f, 0xc0, 0x23, 0xf2,
	0x24, 0xd8, 0x8e, 0x9d, 0xa4, 0x6a, 0xb9, 0xe1, 0xce, 0x27, 0xfe, 0x7d, 0xe7, 0x1c, 0x7f, 0x3e,
	0x0e, 0xbc, 0x5e, 0xb0, 0x7c, 0x59, 0x04, 0x4e, 0xc8, 0x6f, 0xdc, 0x1b, 0x3f, 0x0d, 0x8b, 0x6c,
	0xc9, 0x62, 0xcc, 0x5c, 0x9e, 0x60, 0x9c, 0x62, 0x56, 0x44, 0xb9, 0x9b, 0xa4, 0x3c, 0xe7, 0x6e,
	0x8e, 0x59, 0x1e, 0x20, 0x75, 0x54, 0x44, 0xa0, 0xde, 0x3f, 0x7d, 0xbc, 0xe0, 0x7c, 0x11, 0x61,
	0xc9, 0x05, 0xc5, 0xdc, 0xf5, 0xe3, 0x4d, 0x89, 0xd9, 0x13, 0x18, 0x7e, 0xe6, 0xa1, 0x1f, 0xcd,
	0x30, 0x5d, 0xb1, 0x10, 0x09, 0x81, 0xce, 0x92, 0x67, 0xb9, 0x75, 0x70, 0x76, 0x30, 0xea, 0x7b,
	0x6a, 0x2d, 0xbf, 0x25, 0x3c, 0xcd, 0xad, 0x96, 0xf8, 0x76, 0xe4, 0xa9, 0xb5, 0xfd, 0x04, 0xe0,
	0x07, 0x06, 0x46, 0x75, 0x0c, 0xed, 0x22, 0x8d, 0xb4, 0x48, 0x2e, 0xed, 0x17, 0x30, 0xfc, 0x18,
	0xf1, 0x82, 0x1a, 0xe2, 0x14, 0x0e, 0x31, 0xa6, 0x09, 0x67, 0x71, 0x99, 0xa7, 0xef, 0x55, 0xb1,
	0x3d, 0x04, 0xb8, 0x42, 0xd1, 0x2d, 0xc5, 0x38, 0xdc, 0xd8, 0x7f, 0x5a, 0xd0, 0x33, 0xaa, 0x7b,
	0xd0, 0x62, 0x54, 0xa7, 0x15, 0x2b, 0xd9, 0x49, 0x8e, 0x6b, 0x93, 0x41, 0xad, 0xc9, 0x3b, 0x18,
	0x52, 0xa3, 0x66, 0x98, 0x59, 0xed, 0xb3, 0xf6, 0x68, 0x30, 0x3e, 0x71, 0xea, 0xf3, 0x3b, 0x75,
	0x76, 0x6f, 0x8b, 0x25, 0x63, 0xd1, 0xd5, 0x3a, 0xc7, 0x34, 0xf6, 0x23, 0x8b, 0x8a, 0x9c, 0x83,
	0xf1, 0x43, 0xa7, 0xf4, 0xca, 0x31, 0x5e, 0x39, 0x97, 0xf1, 0xe6, 0xd3, 0x1d, 0xaf, 0xe2, 0xc8,
	0x7b, 0x38, 0x8a, 0xa4, 0x63, 0x3f, 0xb3, 0xb2, 0x49, 0x0b, 0x95, 0xd0, 0x6a, 0x16, 0x6c, 0x5a,
	0x2a, 0xc4, 0xc3, 0xa8, 0x69, 0xf1, 0x5b, 0x18, 0xdc, 0x62, 0x50, 0xc9, 0xe7, 0x4a, 0xbe, 0xd5,
	0x6f, 0xed, 0xac, 0x10, 0xc3, 0x6d, 0xed, 0xb3, 0xa8, 0x1d, 0x4a, 0x57, 0x2b, 0xf1, 0x62, 0xb7,
	0x76, 0xd3, 0x76, 0x59, 0x3b, 0x6c, 0xc4, 0x1f, 0xba, 0xc2, 0xc0, 0x4d, 0x82, 0xf6, 0x1b, 0xe8,
	0x4c, 0xbf, 0xad, 0x2e, 0x88, 0x05, 0x3d, 0x9f, 0x52, 0xa1, 0xcc, 0xb4, 0xcb, 0x26, 0x24, 0x27,
	0xd0, 0x4d, 0x52, 0x9c, 0xb3, 0xb5, 0xbe, 0x76, 0x1d, 0x69, 0xe5, 0xe4, 0x3f, 0x94, 0x4f, 0xa1,
	0x3d, 0x9d, 0x5d, 0xff, 0x5b, 0x68, 0xff, 0x3a, 0x80, 0xde, 0xa5, 0x4e, 0xf2, 0x1c, 0x3a, 0x2c,
	0x59, 0x5d, 0x28, 0x64, 0x30, 0x3e, 0x6e, 0x1e, 0x50, 0x36, 0x2e, 0x0e, 0xa6, 0xf6, 0x35, 0x37,
	0x51, 0xa5, 0x76, 0xb9, 0x89, 0xe6, 0x26, 0xe4, 0x19, 0xb4, 0x59, 0xc6, 0xc5, 0x70, 0x48, 0xec,
	0xfe, 0x16, 0x36, 0xbb, 0x16, 0x94, 0xdc, 0xad, 0xdc, 0xf9, 0x0a, 0xfd, 0x69, 0x2c, 0xae, 0x7b,
	0xee, 0xef, 0x99, 0xc1, 0x57, 0xd0, 0xd7, 0x0d, 0x8b, 0x61, 0x6b, 0xa9, 0x61, 0x7b, 0xd0, 0xcc,
	0xa7, 0x4f, 0xe0, 0xd5, 0x94, 0xfd, 0x05, 0xba, 0x57, 0xb8, 0x77, 0xa0, 0xcf, 0xa1, 0xcf, 0x4c,
	0x25, 0x9d, 0xec, 0xd1, 0x56, 0x73, 0x66, 0xd3, 0xab, 0x39, 0xfb, 0xb7, 0xf0, 0xe9, 0x7b, 0xf9,
	0xd8, 0x89, 0x0b, 0x87, 0x7a, 0x16, 0xa4, 0x9d, 0x3b, 0xcd, 0xe8, 0x7b, 0xf7, 0x2a, 0x88, 0xbc,
	0x84, 0x1e, 0xc5, 0x92, 0x2f, 0xeb, 0x91, 0xed, 0x97, 0xa2, 0x70, 0x83, 0x90, 0x11, 0xdc, 0x95,
	0xbf, 0x00, 0xf3, 0xaa, 0xf6, 0xb1, 0x25, 0x10, 0x74, 0xd5, 0x83, 0x39, 0xff, 0x1b, 0x00, 0x00,
	0xff, 0xff, 0x49, 0xcd, 0x1c, 0xb7, 0xaf, 0x04, 0x00, 0x00,
}
